/** * An interface that describes the operations of a bag of objects. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public interface BagInterfaceModified<T> {		/**	 * Gets the current number of entries in this bag.	 * 	 * @return The integer number of entries currently in the bag.	 */	public int getCurrentSize();	/**	 * Sees whether this bag is empty.	 * 	 * @return True if the bag is empty, or false if not.	 */	public boolean isEmpty();	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry	 *            The object to be added as a new entry.	 * @return True if the addition is successful, or false if not.	 */	public boolean add(T newEntry);	/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal. was successful, or	 *         null.	 */	public T remove();	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry	 *            The entry to be removed.	 * @return True if the removal was successful, or false if not.	 */	public boolean remove(T anEntry);		/** Removes all entries from this bag. */	public void clear();	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry	 *            The entry to be counted.	 * @return The number of times anEntry appears in the bag.	 */	public int getFrequencyOf(T anEntry);	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry	 *            The entry to locate.	 * @return True if the bag contains anEntry, or false if not.	 */	public boolean contains(T anEntry);		/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in the bag. Note: If	 *         the bag is empty, the returned array is empty.	 */	public T[] toArray();		/**	 * Doubles all entries that are in this bag. 	 */	public void doubleBag();	/**	 * Makes a copy of the desired entry that already exists in this bag.	 * 	 * @param desiredEntry The object that will be copied in this bag.	 * @return True if this bag contains the desiredEntry and successfully copied,	 * 			or false if the bag doesn't contain the entry.	 */	public boolean doubleEntry(T desiredEntry);			/**	 * Removes a specified number of unspecified entries from this bag.	 * 	 * @param numberOfEntry Specify the number of entries that will be removed from this bag.	 * @return True if the specified number is less or equal than the number of entries 	 * 			in this bag and be successfully removed. Or false if the specified number	 * 			is bigger than the number of entries in this bag.	 */	public boolean removeEntry(int numberOfEntry); }